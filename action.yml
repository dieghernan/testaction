name: cff-validator
author: Diego HernangÃ³mez
description: "Validate your repository's CITATION.cff file using R software"
branding:
  icon: 'book-open'
  color: 'gray-dark'
inputs:
  citation-path:
    description: 'Path to .cff file to be validated. By default it selects a CITATION.cff file on the root of the repository.'
    required: false
    default: 'CITATION.cff'
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache.'
    required: false
    default: 1
runs:
  using: composite
  steps:
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          install-r: true

      - name: Restore R package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-${{ inputs.cache-version }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-${{ inputs.cache-version }}-

      - name: Install pak
        run: |
          # Install pak
          cat("::group::Install pak\n")
          install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))
          cat("::endgroup::\n")
        shell: Rscript {0}


      - name: Install dependencies
        run: |
          # Install dependencies
          cat("::group::Install/update packages\n")
          cat("os-version=", sessionInfo()$running, "\n")
          # Install/Update packages
          Sys.setenv("PKGCACHE_HTTP_VERSION" = "2")
          pak::pkg_install(c("cffr", "knitr", "sessioninfo"), upgrade = TRUE, dependencies = TRUE)
          cat("::endgroup::\n")
        shell: Rscript {0}

      - name: Session info
        run: |
          # Session info
          cat("::group::Session info\n")
          if (requireNamespace("sessioninfo", quietly = TRUE)) {
            if (packageVersion("sessioninfo") >= "1.2.1") {
              sessioninfo::session_info(pkgs = "installed", include_base = TRUE)
            } else {
              options(width = 200)
              sessioninfo::session_info(rownames(installed.packages()), include_base=TRUE)
            }
          } else {
            sessionInfo()
          }
          cat("::endgroup::\n")
        shell: Rscript {0}


      - name: Validate cff
        run: | 
          # Validate cff
          cat("::group::Results\n")
          citfile <- yaml::read_yaml("${{ inputs.citation-path }}")
          # All elements to character
          citfile <- rapply(citfile, function(x) as.character(x), how = "replace")

          # Convert to json
          cit_temp <- tempfile(fileext = ".json")
          jsonlite::write_json(citfile, cit_temp, pretty = TRUE)

          # Manage brackets
          citfile_clean <- readLines(cit_temp)

          # Search brackets to keep
          # Keep ending and starting
          keep_lines <- grep('", "', citfile_clean)
          keep_lines <- c(keep_lines, grep("\\[$", citfile_clean))
          keep_lines <- c(keep_lines, grep(" \\],", citfile_clean))
          keep_lines <- c(keep_lines, grep(" \\]$", citfile_clean))
          keep_lines <- sort(unique(keep_lines))

          if (all(keep_lines > 0)) {
            keep_string <- citfile_clean[keep_lines]
            citfile_clean[keep_lines] <- ""
          }
          # Remove rest of brackets
          citfile_clean <- gsub('["', '"', citfile_clean, fixed = TRUE)
          citfile_clean <- gsub('"]', '"', citfile_clean, fixed = TRUE)

          if (all(keep_lines > 0)) {
            # Add "good" brackets back
            citfile_clean[keep_lines] <- keep_string
          }

          writeLines(citfile_clean, cit_temp)

          # Download latest scheme
          schema_temp <- tempfile("schema", fileext = ".json")
          download.file("https://raw.githubusercontent.com/citation-file-format/citation-file-format/main/schema.json",
                        schema_temp,
                        mode = "wb", quiet = TRUE
          )

          # Validate
          result <- jsonvalidate::json_validate(cit_temp,
                                                schema_temp,
                                                verbose = TRUE
          )
          # Results
          message("------\n")
          if (result == FALSE){
            print(knitr::kable(attributes(result)$errors, align = "l", caption = paste("${{ inputs.citation-path }}", "errors:")))
            message("\n\n------")
            writeLines(knitr::kable(attributes(result)$errors,
                          align = "l",
                          caption = paste("**${{ inputs.citation-path }}", "errors:**")
                          ),
                          con = "citation_cff_errors.md")
                          
                          
            write("\n\nSee [Guide to Citation File Format schema version 1.2.0](https://github.com/citation-file-format/citation-file-format/blob/main/schema-guide.md) for debugging.",
            file = "citation_cff_errors.md",
            append = TRUE)
            stop("${{ inputs.citation-path }} file not valid. See Artifact: citation-cff-errors for details.")
          } else {
            message("${{ inputs.citation-path }} is valid.")
            message("\n\n------")
          }
          cat("::endgroup::\n")
        shell: Rscript {0}
